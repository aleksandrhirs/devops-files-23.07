apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.container.label }}
  template:
    metadata:
      labels:
        app: {{ .Values.container.label }}
    spec:
      initContainers:
      - name: check-db-ready
        image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}"
        command:
        - sh
        - -c
        - until pg_isready -h {{ .Values.postgresql.fullnameOverride }} -p 5432; do echo database is not ready; sleep 2; done;
      
      - name: create-table
        image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}"
        env:
        - name: DB_USER
          value: {{ .Values.postgresql.global.postgresql.auth.username }}
        - name: DB_PASSWORD
          value: {{ .Values.postgresql.global.postgresql.auth.password }}
        - name: DB_NAME
          value: {{ .Values.postgresql.global.postgresql.auth.database }}
        command:
        - sh
        - -c
        args:
        - PGPASSWORD=$DB_PASSWORD psql -h {{ .Values.postgresql.fullnameOverride }} -p 5432 -w -d $DB_NAME -U $DB_USER
          -c 'CREATE TABLE IF NOT EXISTS transactions (id serial PRIMARY KEY, client_id
          varchar(100), amount integer);'
      containers:
      - name: billing
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        env:
        - name: DEBUG
          value: "True"
        - name: DB_USER
          value: {{ .Values.postgresql.global.postgresql.auth.username }}
        - name: DB_PASSWORD
          value: {{ .Values.postgresql.global.postgresql.auth.password }}password
        - name: DB_NAME
          value: {{ .Values.postgresql.global.postgresql.auth.database }}
        - name: DATABASE_URL
          value: postgresql://${DB_USER}:${DB_PASSWORD}@postgres/${DB_NAME}
